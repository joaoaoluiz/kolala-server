generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  status     Int      @default(1)
  authMethod String
  authKey    String   @unique
  level      String   @default("user")
  profile    Profile?
}

model Profile {
  id               Int       @id
  name             String
  picture          String
  twitterAccount   String?
  facebookAccount  String?
  instagramAccount String?
  User             User      @relation(fields: [id], references: [id], onDelete: Cascade)
  Atendee          Atendee[]
  createdEvents    Event[]   @relation()
  Message          Message[]
  createdReports   Report[]  @relation("author")
  targetedReports  Report[]  @relation("target")
}

model Report {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  category    Int
  status      Int      @default(0)
  authorId    Int
  targetId    Int
  description String?
  author      Profile  @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  target      Profile  @relation("target", fields: [targetId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  title       String
  description String
  category    Int
  status      Int          @default(1)
  authorId    Int
  datetime    DateTime
  lat         Float
  lng         Float
  address     String
  icon        Int
  author      Profile      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Atendee     Atendee[]
  Message     Message[]
  EventImage  EventImage[]
}

model EventImage {
  id      Int    @id @default(autoincrement())
  key     String
  url     String
  eventId Int
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Atendee {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id         Int       @id @default(autoincrement())
  authorId   Int
  eventId    Int
  content    String
  answerToId Int?
  answerTo   Message?  @relation("answer", fields: [answerToId], references: [id])
  author     Profile   @relation(fields: [authorId], references: [id])
  event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  answeredBy Message[] @relation("answer")
  createdAt  DateTime  @default(now())
}
